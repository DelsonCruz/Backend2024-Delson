
import crypto from 'crypto'


// const hexValue = crypto.randomBytes(10).toString('hex');
// const decimalValue = Math.abs(parseInt(hexValue, 16));
// console.log(decimalValue);


// console.log(parseInt(crypto.randomBytes(10).toString('hex'), 16));


// title(nombre del producto)
// description(descripcion del producto)
// price(precio)
// thumbnail(ruta de imagen)
// code(codigo)
// stock (numero de piezas disponibles)
let NombreProducto,
 Descripcion,
 Precio,
 Imagen,
 Codigo,
 StockInventario;
 

console.log(crypto.randomBytes(10).toString('hex'))
class ProductManager {
    constructor() {
        this.products = []
    }

       

    addProduct(producto) {
        //VALIDAR QUE TODOS LOS DATOS SE HAYAN INGRESADO
        //const indice = this.products.findIndex(prod = prod.code === producto.code)
        
        this.NombreProducto = NombreProducto;
        this.Descripcion = Descripcion;
        this.Precio = Precio;
        this.Imagen = Imagen;
        this.Codigo = Codigo;
        this.StockInventario = StockInventario;

        // para simplificar la presentacion de todos los datos y poderlos presentar y llevar hacia otras (simplificar el console.log) se puede usar:
        //this.verInfo = `El nombre del producto es: ${this.NombreProducto}, tiene precio de $: ${this.Precio} como se presenta acontinuacion ${this.Imagen} con el codigo ${this.Codigo} y su cantidad en Stock es: ${this.StockInventario}`;

        rl.question(
            'Ingresa Nombre del Producto: <br>', 
            'Ingresa  Descripcion: <br>',
            'Ingresa  Precio: <br>',
            'Ingresa  Imagen: <br>',
            'Ingresa  Codigo: <br>',
                        (NombreProducto,Descripcion,Precio,Imagen,Codigo,StockInventario) => {
            console.log(
                
                `Ingreso Producto: ${NombreProducto} <br>`, 
                `Ingreso Descripcion: ${Descripcion} <br>`,
                `Ingreso Precio: ${Precio} <br>`,
                `Ingreso Imagen: ${Imagen} <br>`,
                `Ingreso Codigo: ${Codigo} <br>`,
                `Ingreso StockInventario: ${StockInventario} <br>`
                );

            rl.close();
          });

        

        const existe = this.products.includes(prod => prod.code === producto.code)

        //EXISTE este producto en el array
        if (existe) {
            return "Producto ya existente";
        } else {
            producto.id = (crypto.randomBytes(10).toString('hex'), 16);
            this.products.push(producto)
        }

{

 const fs = require('fs');


// Ingresar productos a un archivo JSON
function escribirProducto() {
  fs.writeFile('products.json', JSON.stringify(products), 'utf8', (err) => {
    if (err) {
      console.error('Error writing to file:', err);
    } else {
      console.log('Products written to file successfully!');
    }
  });
}

// Funcion agregar o actualizar producto
function actualizarProducto(producto) {
  const editarProducto = true;  // Cambiar a 'false' para productos que for products que no deben ser editados

  const existe = products.findIndex(prod => prod.code === producto.code);

  if (existe !== -1 && editarProducto) {
    // Actualizar producto existente
    products[existe] = producto;
    console.log('Producto Actualizado!');
  } else if (existe === -1) {
    // Agregar nuevo producto
    products.push(producto);
    console.log('Producto agregado!');
  } else {
    console.log('Producto no editado.');
  }

  // Escribir producto en el archivo/carpeta a la que se agrega
  escribirProducto();
}
}


const newProduct = { Codigo: 'crypto', NombreProducto: '', Precio: '' };
actualizarProducto(newProduct);



    }
    getProducts(MostrarProductos){
        const productosIngresados = this.products.filter(prod => prod.code === producto.code);
        console.log(productosIngresados);
    }

    getProductsByID(MostrarCodigoProducto){
        const busquedaCodigo = [];
        const existeCodigo = codigoBusqueda.some(code => this.products.some(prod => prod.code === code));
        console.log(busquedaCodigo);
                
    }
    
    // updateProducts(){
    //     const actualizarProducto = this.products.findIndex(prod => prod.code === producto.code);

        // Borrado de productos por codigo
  borrarCodigo(Codigo) {
    const borrarCodigo = this.products.findIndex(prod => prod.code === productCode);
    
    if (borrarCodigo !== -1) {
      // Producto borrado
      this.products.splice(borrarCodigo, 1);
      console.log(`Producto con el código ${Codigo} borrado.`);
      // Producto no encontrado
    } else {
      console.log(`Producto con el código ${Codigo} no encontrado.`);
    }

//     if (actualizarProducto !== -1) {
    
//     this.products[actualizarProducto].NombreProducto = `El nuevo nombre del producto es: ${this.NombreProducto}<br>`   
//     this.products[actualizarProducto].Precio = `tiene precio de $: ${this.Precio}<br>`;
//     this.products[actualizarProducto].Imagen = `como se presenta acontinuacion ${this.Imagen}<br>`
//     this.products[actualizarProducto].Codigo =`con el codigo ${this.Codigo}<br>` 
//     this.products[actualizarProducto].StockInventario = `y su cantidad en Stock es: ${this.StockInventario}`;
    

    
//     producto = this.products[actualizarProducto];} 
//     else {
//     console.log("Producto no encontrado");
// }

    }
}


const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();
const port = 8000;

app.use(bodyParser.json());

let products = [];




